declare lower ;
input up2DaysScore        = +1  ;
input down2DaysScore      = -2  ;
input AggPeriod1_Days     = 5   ;
input AggPeriod1_Short    = 20  ;
input AggPeriod1_Mid      = 50  ;
input AggPeriod1_Long     = 100 ;
input AggPeriod2_Weeks    = 3   ;
input AggPeriod2_Short    = 20  ;
input AggPeriod2_Mid      = 50  ;
input AggPeriod2_Long     = 100 ;
input AggPeriod1          = AggregationPeriod.DAY  ;
input AggPeriod2          = AggregationPeriod.WEEK ;
input AggPeriod1_AverageType = AverageType.SIMPLE ;
input AggPeriod2_AverageType = AverageType.SIMPLE ;

def closeAggDay  = close(period = aggPeriod1) ;
def closeAggWeek = close(period = aggPeriod2) ;
def openAggDay   = open(period  = aggPeriod1) ;
def openAggWeek  = open(period  = aggPeriod2) ;

## BEGIN Get current and previous 2 days SMA Close to compare for up or down movement
## ( should I round this number ? )
def smaDays      = Average(close(period = aggPeriod1),    AggPeriod1_Days) ;
def smaDaysAgo1  = Average(close(period = aggPeriod1)[1], AggPeriod1_Days) ;
def smaDaysAgo2  = Average(close(period = aggPeriod1)[2], AggPeriod1_Days) ;
def upDays ;
if  smaDays > smaDaysAgo1
and smaDays > smaDaysAgo2 {
    upDays = up2DaysScore ;
} else if smaDays < smaDaysAgo1
      and smaDays < smaDaysAgo2 {
    upDays = down2DaysScore ;
} else if smaDays < smaDaysAgo1  {
    upDays = -1 ;
} else {
    upDays = +0 ;
}
## END Get current and previous 2 days SMA Close to compare for up or down movement

## BEGIN Score Aggregation Period 1 

def avgType      = AggPeriod1_AverageType ;
def shortAvg     = MovingAverage(avgType, close(period = aggPeriod1), 20)   ;
def midAvg       = MovingAverage(avgType, close(period = aggPeriod1), 50)   ;
def longAvg      = MovingAverage(avgType, close(period = aggPeriod1), 100)  ;

def scoreAggPeriod1Short = if closeAggDay > shortAvg   then 2 else 0 ;
def scoreAggPeriod1Mid   = if closeAggDay > midAvg     then 1 else 0 ;
def scoreAggPeriod1Long  = if closeAggDay > longAvg    then 1 else 0 ;
def scoreAggPeriod1Close = if closeAggDay > closeAggDay from 1 bar ago
                          and closeAggDay > openAggDay then 1 else 0 ;

def scoreAggPeriod1 = scoreAggPeriod1Short
                    + scoreAggPeriod1Mid
                    + scoreAggPeriod1Long
                    + scoreAggPeriod1Close ;

## END Score Aggregation Period 1

## BEGIN Score Aggregation Period 2
def scoreAggPeriod2Short ;
def scoreAggPeriod2Mid   ;
def scoreAggPeriod2Long  ;
def scoreAggPeriod2Close ;
def scoreAggPeriod2 = scoreAggPeriod2Short
                    + scoreAggPeriod2Mid
                    + scoreAggPeriod2Long
                    + scoreAggPeriod2Close ;

def avgType2      = AggPeriod2_AverageType ;
def shortAvg2     = MovingAverage(avgType, close(period = aggPeriod2), 20)   ;
def midAvg2       = MovingAverage(avgType, close(period = aggPeriod2), 50)   ;
def longAvg2      = MovingAverage(avgType, close(period = aggPeriod2), 100)  ;

if closeAggDay > shortAvg {
    scoreAggPeriod2Short = 2 ;
} else {
    scoreAggPeriod2Short = 0 ;
}
if closeAggDay > midAvg {
    scoreAggPeriod2Mid = 1 ;
} else {
    scoreAggPeriod2Mid = 0 ;
}
if closeAggDay > longAvg {
    scoreAggPeriod2Long = 1 ;
} else {
    scoreAggPeriod2Long = 0 ;
}
if closeAggDay > closeAggWeek from 1 bar ago
and closeAggDay > openAggDay 
{
    scoreAggPeriod2Close = 1;
} else {
    scoreAggPeriod2Close = 0;
};
## END Score Aggregation Period 2

## BEGIN Score of Short Term (5 Day) Moving Average against 20 Day Moving Average
def isAbove      = if sma5 > smaShort        then +1 else 0     ;
def isFalling    = if sma5 < sma5daysago1 then -1 else 0     ;
## BEGIN Score of Short Term (5 Day) Moving Average against 20 Day Moving Average

def isRising     = if daysAgo1 and daysAgo2 then 1 else 0 ;
#def 5dayScore ; #   = isAbove ; # - isFalling + isRising ; # + up2Days;


def scoreAggPeriod1_SMA1  ;
def scoreAggPeriod1_SMA2  ;
def scoreAggPeriod1_SMA3  ;
def scoreAggPeriod1_SMA4  ;
def scoreAggPeriod1_close ;
def scoreAggPeriod2_SMA1  ;
def scoreAggPeriod2_SMA2  ;
def scoreAggPeriod2_SMA3  ;
#def scoreAggPeriod2_SMA4  ;
def scoreAggPeriod2_close ;
plot DeltaScore ;
plot zeroLine    = 0 ;
AddLabel(yes, concat("isAbove =", isAbove), color.WHITE) ;
AddLabel(yes, concat("isFalling =", isFalling), color.WHITE) ;
AddLabel(yes, concat("isRising =", isRising), color.WHITE) ;
AddLabel(yes, concat("upDays =", upDays), color.WHITE) ;
AddLabel(yes, concat("SCORE =", isAbove), color.WHITE) ;

#def scoreAggPeriod1  = scoreAggPeriod1_SMA1 + scoreAggPeriod1_SMA2 + scoreAggPeriod1_SMA3 #+ scoreAggPeriod1_Close;
#
#def scoreAggPeriod2 = scoreAggPeriod2_SMA1 + scoreAggPeriod2_SMA2 + scoreAggPeriod2_SMA3 #+ scoreAggPeriod2_Close;

def score       = scoreAggPeriod1 + scoreAggPeriod2 + up2Days;

if score == 10 {
    deltaScore = 25 ;
} else if score >= 7 {
    deltaScore = 18 ;
} else if score >= 6 {
    deltaScore = 15 ;
} else {
    deltaScore = 0 ;
}

#def score = scoreAggPeriod1 + scoreAggPeriod2;
#def deltaScore ;

## BEGIN Score for DAY - Aggregation Period 1 ###
#if closeAggDay > sma5 {
#    scoreAggPeriod1_SMA1 = 2 ;
#} else {
#    scoreAggPeriod1_SMA1 = 0 ;
#}
#if closeAggDay > sma20 {
#    scoreAggPeriod1_SMA2 = 2 ;
#} else {
#    scoreAggPeriod1_SMA2 = 0 ;
#}
#if closeAggDay > sma50 {
#    scoreAggPeriod1_SMA3 = 1 ;
#} else {
#    scoreAggPeriod1_SMA3 = 0 ;
#}
#if closeAggDay > sma100 {
#    scoreAggPeriod1_SMA4 = 1 ;
#} else {
#    scoreAggPeriod1_SMA4 = 0 ;
#}


### END Score for DAY - Aggregation Period 1 ###

### BEGIN Score for WEEK - Aggregation Period 2 ###
if closeAggDay > sma3weeks {
    scoreAggPeriod2_SMA1 = 2 ;
} else {
    scoreAggPeriod2_SMA1 = 0 ;
}
if closeAggDay > sma9weeks {
    scoreAggPeriod2_SMA2 = 1 ;
} else {
    scoreAggPeriod2_SMA2 = 0 ;
}
if closeAggDay > sma20weeks {
    scoreAggPeriod2_SMA3 = 1 ;
} else {
    scoreAggPeriod2_SMA3 = 0 ;
}

if (closeAggDay > closeAggWeek from 1 bar ago
and closeAggDay > openAggWeek  from 1 bar ago
and closeAggDay > openAggWeek)
{
    scoreAggPeriod2_Close = 1;
} else {
    scoreAggPeriod2_Close = 0;
}
### END Score for WEEK - Aggregation Period 2 ###

